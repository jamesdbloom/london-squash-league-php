<?php
require_once('../../load.php');
load::load_file('database', 'database.php');
load::load_file('domain/ranking', 'ranking.php');
load::load_file('domain/round', 'roundDAO.php');
class RankingDAO extends DAO implements Mapper
{
    const player_id_column = 'PLAYER_ID';
    const name_column = 'NAME';
    const email_column = 'EMAIL';
    const division_column = 'DIVISION';
    const league_column = 'LEAGUE';
    const league_id_column = 'LEAGUE';
    const points_column = 'POINTS';
    const relative_column = 'RELATIVE';
    const round_id_parameter = 'ROUND_ID';

    public static function get_all_by_League($round_id)
    {
        $query =
            "SELECT
GROUPED.PLAYER_ID as " . self::player_id_column . ",
GROUPED.EMAIL as " . self::email_column . ",
GROUPED.NAME as " . self::name_column . ",
GROUPED.DIVISION as " . self::division_column . ",
GROUPED.LEAGUE as " . self::league_column . ",
GROUPED.POINTS as " . self::points_column . ",
ROUND(100 * GROUPED.POINTS / (SELECT max(POINTS) FROM (SELECT
P1_ID as PLAYER_ID,
P1_EMAIL as NAME,
P1_NAME as EMAIL,
DIVISION as DIVISION,
LEAGUE as LEAGUE,
sum(P1_POINTS) as POINTS
FROM
((SELECT
P1.PLAYER_ID as P1_ID,
U1.EMAIL as P1_EMAIL,
U1.NAME as P1_NAME,
U2.NAME as P2_NAME,
DIVISION.NAME AS DIVISION,
LEAGUE.NAME AS LEAGUE,
ROUND.START, ROUND.END,
M.P1_SCORE as P1_SCORE, M.P2_SCORE as P2_SCORE,
IF(M.P1_SCORE > M.P2_SCORE, 'P1', IF(M.P1_SCORE = M.P2_SCORE, 'DRAW', 'P2') ) AS WINNER,
(IF(M.P1_SCORE > M.P2_SCORE, 3, IF(M.P1_SCORE = M.P2_SCORE, 2, 1) ) + M.P1_SCORE * 0.1 ) / CAST(DIVISION.NAME AS UNSIGNED) AS P1_POINTS,
(IF(M.P2_SCORE > M.P1_SCORE, 3, IF(M.P2_SCORE = M.P1_SCORE, 2, 1) ) + M.P2_SCORE * 0.1 ) / CAST(DIVISION.NAME AS UNSIGNED) AS P2_POINTS
FROM LEAGUE
JOIN ROUND ON ROUND.LEAGUE_ID = LEAGUE.LEAGUE_ID
JOIN DIVISION ON DIVISION.LEAGUE_ID = LEAGUE.LEAGUE_ID
JOIN MATCHES ON MATCHES.DIVISION_ID = DIVISION.DIVISION_ID JOIN PLAYER AS P1 ON P1.PLAYER_ID = MATCHES.PLAYER_ONE_ID
JOIN PLAYER AS P2 ON P2.PLAYER_ID = MATCHES.PLAYER_TWO_ID
JOIN USER AS U1 ON U1.USER_ID = P1.USER_ID
JOIN USER AS U2 ON U2.USER_ID = P2.USER_ID
JOIN (SELECT ROUND_ID, DIVISION_ID, SCORE, CAST(SUBSTRING_INDEX(SCORE,'-',1) AS UNSIGNED) AS P1_SCORE, CAST(SUBSTRING(SCORE FROM SUBSTRING_INDEX(SCORE,'-',1)) AS UNSIGNED) AS P2_SCORE, PLAYER_ONE_ID, PLAYER_TWO_ID FROM MATCHES) AS M ON M.ROUND_ID = ROUND.ROUND_ID AND M.DIVISION_ID = DIVISION.DIVISION_ID AND M.PLAYER_ONE_ID = P1.PLAYER_ID AND M.PLAYER_TWO_ID = P2.PLAYER_ID
WHERE ROUND.ROUND_ID = :" . self::round_id_parameter . " AND M.SCORE IS NOT NULL)
UNION ALL
(SELECT
P1.PLAYER_ID as P1_ID,
U1.EMAIL as P1_EMAIL,
U1.NAME as P1_NAME,
U2.NAME as P2_NAME,
DIVISION.NAME AS DIVISION,
LEAGUE.NAME AS LEAGUE,
ROUND.START, ROUND.END,
M.P1_SCORE as P1_SCORE, M.P2_SCORE as P2_SCORE,
IF(M.P1_SCORE > M.P2_SCORE, 'P1', IF(M.P1_SCORE = M.P2_SCORE, 'DRAW', 'P2') ) AS WINNER,
(IF(M.P1_SCORE > M.P2_SCORE, 3, IF(M.P1_SCORE = M.P2_SCORE, 2, 1) ) + M.P1_SCORE * 0.1 ) / CAST(DIVISION.NAME AS UNSIGNED) AS P1_POINTS,
(IF(M.P2_SCORE > M.P1_SCORE, 3, IF(M.P2_SCORE = M.P1_SCORE, 2, 1) ) + M.P2_SCORE * 0.1 ) / CAST(DIVISION.NAME AS UNSIGNED) AS P2_POINTS
FROM LEAGUE
JOIN ROUND ON ROUND.LEAGUE_ID = LEAGUE.LEAGUE_ID
JOIN DIVISION ON DIVISION.LEAGUE_ID = LEAGUE.LEAGUE_ID
JOIN MATCHES ON MATCHES.DIVISION_ID = DIVISION.DIVISION_ID JOIN PLAYER AS P1 ON P1.PLAYER_ID = MATCHES.PLAYER_ONE_ID
JOIN PLAYER AS P2 ON P2.PLAYER_ID = MATCHES.PLAYER_TWO_ID
JOIN USER AS U1 ON U1.USER_ID = P1.USER_ID
JOIN USER AS U2 ON U2.USER_ID = P2.USER_ID
JOIN (SELECT ROUND_ID, DIVISION_ID, SCORE, CAST(SUBSTRING_INDEX(SCORE,'-',1) AS UNSIGNED) AS P2_SCORE, CAST(SUBSTRING(SCORE FROM SUBSTRING_INDEX(SCORE,'-',1)) AS UNSIGNED) AS P1_SCORE, PLAYER_ONE_ID, PLAYER_TWO_ID FROM MATCHES) AS M ON M.ROUND_ID = ROUND.ROUND_ID AND M.DIVISION_ID = DIVISION.DIVISION_ID AND M.PLAYER_TWO_ID = P1.PLAYER_ID AND M.PLAYER_ONE_ID = P2.PLAYER_ID
WHERE ROUND.ROUND_ID = :" . self::round_id_parameter . " AND M.SCORE IS NOT NULL)) as RANKING
GROUP BY P1_ID ORDER BY POINTS DESC, DIVISION, NAME) AS MAX_GROUPED)) as " . self::relative_column . "
FROM
(SELECT
P1_ID as PLAYER_ID,
P1_EMAIL as EMAIL,
P1_NAME as NAME,
DIVISION as DIVISION,
LEAGUE as LEAGUE,
sum(P1_POINTS) as POINTS
FROM
((SELECT
P1.PLAYER_ID as P1_ID,
U1.EMAIL as P1_EMAIL,
U1.NAME as P1_NAME,
U2.NAME as P2_NAME,
DIVISION.NAME AS DIVISION,
LEAGUE.NAME AS LEAGUE,
ROUND.START, ROUND.END,
M.P1_SCORE as P1_SCORE, M.P2_SCORE as P2_SCORE,
IF(M.P1_SCORE > M.P2_SCORE, 'P1', IF(M.P1_SCORE = M.P2_SCORE, 'DRAW', 'P2') ) AS WINNER,
(IF(M.P1_SCORE > M.P2_SCORE, 3, IF(M.P1_SCORE = M.P2_SCORE, 2, 1) ) + M.P1_SCORE * 0.1 ) / CAST(DIVISION.NAME AS UNSIGNED) AS P1_POINTS,
(IF(M.P2_SCORE > M.P1_SCORE, 3, IF(M.P2_SCORE = M.P1_SCORE, 2, 1) ) + M.P2_SCORE * 0.1 ) / CAST(DIVISION.NAME AS UNSIGNED) AS P2_POINTS
FROM LEAGUE
JOIN ROUND ON ROUND.LEAGUE_ID = LEAGUE.LEAGUE_ID
JOIN DIVISION ON DIVISION.LEAGUE_ID = LEAGUE.LEAGUE_ID
JOIN MATCHES ON MATCHES.DIVISION_ID = DIVISION.DIVISION_ID JOIN PLAYER AS P1 ON P1.PLAYER_ID = MATCHES.PLAYER_ONE_ID
JOIN PLAYER AS P2 ON P2.PLAYER_ID = MATCHES.PLAYER_TWO_ID
JOIN USER AS U1 ON U1.USER_ID = P1.USER_ID
JOIN USER AS U2 ON U2.USER_ID = P2.USER_ID
JOIN (SELECT ROUND_ID, DIVISION_ID, SCORE, CAST(SUBSTRING_INDEX(SCORE,'-',1) AS UNSIGNED) AS P1_SCORE, CAST(SUBSTRING(SCORE FROM SUBSTRING_INDEX(SCORE,'-',1)) AS UNSIGNED) AS P2_SCORE, PLAYER_ONE_ID, PLAYER_TWO_ID FROM MATCHES) AS M ON M.ROUND_ID = ROUND.ROUND_ID AND M.DIVISION_ID = DIVISION.DIVISION_ID AND M.PLAYER_ONE_ID = P1.PLAYER_ID AND M.PLAYER_TWO_ID = P2.PLAYER_ID
WHERE ROUND.ROUND_ID = :" . self::round_id_parameter . " AND M.SCORE IS NOT NULL)
UNION ALL
(SELECT
P1.PLAYER_ID as P1_ID,
U1.EMAIL as P1_EMAIL,
U1.NAME as P1_NAME,
U2.NAME as P2_NAME,
DIVISION.NAME AS DIVISION,
LEAGUE.NAME AS LEAGUE,
ROUND.START, ROUND.END,
M.P1_SCORE as P1_SCORE, M.P2_SCORE as P2_SCORE,
IF(M.P1_SCORE > M.P2_SCORE, 'P1', IF(M.P1_SCORE = M.P2_SCORE, 'DRAW', 'P2') ) AS WINNER,
(IF(M.P1_SCORE > M.P2_SCORE, 3, IF(M.P1_SCORE = M.P2_SCORE, 2, 1) ) + M.P1_SCORE * 0.1 ) / CAST(DIVISION.NAME AS UNSIGNED) AS P1_POINTS,
(IF(M.P2_SCORE > M.P1_SCORE, 3, IF(M.P2_SCORE = M.P1_SCORE, 2, 1) ) + M.P2_SCORE * 0.1 ) / CAST(DIVISION.NAME AS UNSIGNED) AS P2_POINTS
FROM LEAGUE
JOIN ROUND ON ROUND.LEAGUE_ID = LEAGUE.LEAGUE_ID
JOIN DIVISION ON DIVISION.LEAGUE_ID = LEAGUE.LEAGUE_ID
JOIN MATCHES ON MATCHES.DIVISION_ID = DIVISION.DIVISION_ID JOIN PLAYER AS P1 ON P1.PLAYER_ID = MATCHES.PLAYER_ONE_ID
JOIN PLAYER AS P2 ON P2.PLAYER_ID = MATCHES.PLAYER_TWO_ID
JOIN USER AS U1 ON U1.USER_ID = P1.USER_ID
JOIN USER AS U2 ON U2.USER_ID = P2.USER_ID
JOIN (SELECT ROUND_ID, DIVISION_ID, SCORE, CAST(SUBSTRING_INDEX(SCORE,'-',1) AS UNSIGNED) AS P2_SCORE, CAST(SUBSTRING(SCORE FROM SUBSTRING_INDEX(SCORE,'-',1)) AS UNSIGNED) AS P1_SCORE, PLAYER_ONE_ID, PLAYER_TWO_ID FROM MATCHES) AS M ON M.ROUND_ID = ROUND.ROUND_ID AND M.DIVISION_ID = DIVISION.DIVISION_ID AND M.PLAYER_TWO_ID = P1.PLAYER_ID AND M.PLAYER_ONE_ID = P2.PLAYER_ID
WHERE ROUND.ROUND_ID = :" . self::round_id_parameter . " AND M.SCORE IS NOT NULL)) as RANKING
GROUP BY P1_ID ORDER BY POINTS DESC, DIVISION, NAME) AS GROUPED;";
        $parameters = array(
            ':' . self::round_id_parameter => self::sanitize_value($round_id),
        );
        return self::load_all_objects($query, $parameters, new self(), 'load ranking ');
    }

    public function map(array $ranking_row)
    {
        return new Ranking(
            $ranking_row[self::player_id_column],
            $ranking_row[self::name_column],
            $ranking_row[self::email_column],
            $ranking_row[self::division_column],
            $ranking_row[self::league_column],
            $ranking_row[self::points_column],
            $ranking_row[self::relative_column]
        );
    }
}

/*
SELECT
GROUPED.PLAYER_ID,
GROUPED.NAME,
GROUPED.EMAIL,
GROUPED.DIVISION,
GROUPED.LEAGUE,
GROUPED.POINTS,
ROUND(100 * GROUPED.POINTS / (SELECT max(POINTS) FROM (SELECT
P1_ID as PLAYER_ID,
P1_EMAIL as NAME,
P1_NAME as EMAIL,
DIVISION as DIVISION,
LEAGUE as LEAGUE,
sum(P1_POINTS) as POINTS
FROM
((SELECT
P1.PLAYER_ID as P1_ID,
U1.EMAIL as P1_EMAIL,
U1.NAME as P1_NAME,
U2.NAME as P2_NAME,
DIVISION.NAME AS DIVISION,
LEAGUE.NAME AS LEAGUE,
ROUND.START, ROUND.END,
M.P1_SCORE as P1_SCORE, M.P2_SCORE as P2_SCORE,
IF(M.P1_SCORE > M.P2_SCORE, 'P1', IF(M.P1_SCORE = M.P2_SCORE, 'DRAW', 'P2') ) AS WINNER,
(IF(M.P1_SCORE > M.P2_SCORE, 3, IF(M.P1_SCORE = M.P2_SCORE, 2, 1) ) + M.P1_SCORE * 0.1 ) / CAST(DIVISION.NAME AS UNSIGNED) AS P1_POINTS,
(IF(M.P2_SCORE > M.P1_SCORE, 3, IF(M.P2_SCORE = M.P1_SCORE, 2, 1) ) + M.P2_SCORE * 0.1 ) / CAST(DIVISION.NAME AS UNSIGNED) AS P2_POINTS
FROM LEAGUE
JOIN ROUND ON ROUND.LEAGUE_ID = LEAGUE.LEAGUE_ID
JOIN DIVISION ON DIVISION.LEAGUE_ID = LEAGUE.LEAGUE_ID
JOIN PLAYER AS P1 ON P1.DIVISION_ID = DIVISION.DIVISION_ID
JOIN PLAYER AS P2 ON P2.DIVISION_ID = DIVISION.DIVISION_ID
JOIN USER AS U1 ON U1.USER_ID = P1.USER_ID
JOIN USER AS U2 ON U2.USER_ID = P2.USER_ID
JOIN (SELECT ROUND_ID, DIVISION_ID, SCORE, CAST(SUBSTRING_INDEX(SCORE,'-',1) AS UNSIGNED) AS P1_SCORE, CAST(SUBSTRING(SCORE FROM SUBSTRING_INDEX(SCORE,'-',1)) AS UNSIGNED) AS P2_SCORE, PLAYER_ONE_ID, PLAYER_TWO_ID FROM MATCHES) AS M ON M.ROUND_ID = ROUND.ROUND_ID AND M.DIVISION_ID = DIVISION.DIVISION_ID AND M.PLAYER_ONE_ID = P1.PLAYER_ID AND M.PLAYER_TWO_ID = P2.PLAYER_ID
WHERE ROUND.START = :" . self::round_start_parameter . " AND ROUND.END = :" . self::round_end_parameter . " AND M.SCORE IS NOT NULL)
UNION ALL
(SELECT
P1.PLAYER_ID as P1_ID,
U1.EMAIL as P1_EMAIL,
U1.NAME as P1_NAME,
U2.NAME as P2_NAME,
DIVISION.NAME AS DIVISION,
LEAGUE.NAME AS LEAGUE,
ROUND.START, ROUND.END,
M.P1_SCORE as P1_SCORE, M.P2_SCORE as P2_SCORE,
IF(M.P1_SCORE > M.P2_SCORE, 'P1', IF(M.P1_SCORE = M.P2_SCORE, 'DRAW', 'P2') ) AS WINNER,
(IF(M.P1_SCORE > M.P2_SCORE, 3, IF(M.P1_SCORE = M.P2_SCORE, 2, 1) ) + M.P1_SCORE * 0.1 ) / CAST(DIVISION.NAME AS UNSIGNED) AS P1_POINTS,
(IF(M.P2_SCORE > M.P1_SCORE, 3, IF(M.P2_SCORE = M.P1_SCORE, 2, 1) ) + M.P2_SCORE * 0.1 ) / CAST(DIVISION.NAME AS UNSIGNED) AS P2_POINTS
FROM LEAGUE
JOIN ROUND ON ROUND.LEAGUE_ID = LEAGUE.LEAGUE_ID
JOIN DIVISION ON DIVISION.LEAGUE_ID = LEAGUE.LEAGUE_ID
JOIN PLAYER AS P1 ON P1.DIVISION_ID = DIVISION.DIVISION_ID
JOIN PLAYER AS P2 ON P2.DIVISION_ID = DIVISION.DIVISION_ID
JOIN USER AS U1 ON U1.USER_ID = P1.USER_ID
JOIN USER AS U2 ON U2.USER_ID = P2.USER_ID
JOIN (SELECT ROUND_ID, DIVISION_ID, SCORE, CAST(SUBSTRING_INDEX(SCORE,'-',1) AS UNSIGNED) AS P2_SCORE, CAST(SUBSTRING(SCORE FROM SUBSTRING_INDEX(SCORE,'-',1)) AS UNSIGNED) AS P1_SCORE, PLAYER_ONE_ID, PLAYER_TWO_ID FROM MATCHES) AS M ON M.ROUND_ID = ROUND.ROUND_ID AND M.DIVISION_ID = DIVISION.DIVISION_ID AND M.PLAYER_TWO_ID = P1.PLAYER_ID AND M.PLAYER_ONE_ID = P2.PLAYER_ID
WHERE ROUND.START = :" . self::round_start_parameter . " AND ROUND.END = :" . self::round_end_parameter . " AND M.SCORE IS NOT NULL)) as RANKING
GROUP BY P1_ID ORDER BY POINTS DESC, DIVISION, NAME) AS MAX_GROUPED)) as RELATIVE
FROM
(SELECT
P1_ID as PLAYER_ID,
P1_EMAIL as NAME,
P1_NAME as EMAIL,
DIVISION as DIVISION,
LEAGUE as LEAGUE,
sum(P1_POINTS) as POINTS
FROM
((SELECT
P1.PLAYER_ID as P1_ID,
U1.EMAIL as P1_EMAIL,
U1.NAME as P1_NAME,
U2.NAME as P2_NAME,
DIVISION.NAME AS DIVISION,
LEAGUE.NAME AS LEAGUE,
ROUND.START, ROUND.END,
M.P1_SCORE as P1_SCORE, M.P2_SCORE as P2_SCORE,
IF(M.P1_SCORE > M.P2_SCORE, 'P1', IF(M.P1_SCORE = M.P2_SCORE, 'DRAW', 'P2') ) AS WINNER,
(IF(M.P1_SCORE > M.P2_SCORE, 3, IF(M.P1_SCORE = M.P2_SCORE, 2, 1) ) + M.P1_SCORE * 0.1 ) / CAST(DIVISION.NAME AS UNSIGNED) AS P1_POINTS,
(IF(M.P2_SCORE > M.P1_SCORE, 3, IF(M.P2_SCORE = M.P1_SCORE, 2, 1) ) + M.P2_SCORE * 0.1 ) / CAST(DIVISION.NAME AS UNSIGNED) AS P2_POINTS
FROM LEAGUE
JOIN ROUND ON ROUND.LEAGUE_ID = LEAGUE.LEAGUE_ID
JOIN DIVISION ON DIVISION.LEAGUE_ID = LEAGUE.LEAGUE_ID
JOIN PLAYER AS P1 ON P1.DIVISION_ID = DIVISION.DIVISION_ID
JOIN PLAYER AS P2 ON P2.DIVISION_ID = DIVISION.DIVISION_ID
JOIN USER AS U1 ON U1.USER_ID = P1.USER_ID
JOIN USER AS U2 ON U2.USER_ID = P2.USER_ID
JOIN (SELECT ROUND_ID, DIVISION_ID, SCORE, CAST(SUBSTRING_INDEX(SCORE,'-',1) AS UNSIGNED) AS P1_SCORE, CAST(SUBSTRING(SCORE FROM SUBSTRING_INDEX(SCORE,'-',1)) AS UNSIGNED) AS P2_SCORE, PLAYER_ONE_ID, PLAYER_TWO_ID FROM MATCHES) AS M ON M.ROUND_ID = ROUND.ROUND_ID AND M.DIVISION_ID = DIVISION.DIVISION_ID AND M.PLAYER_ONE_ID = P1.PLAYER_ID AND M.PLAYER_TWO_ID = P2.PLAYER_ID
WHERE ROUND.START = :" . self::round_start_parameter . " AND ROUND.END = :" . self::round_end_parameter . " AND M.SCORE IS NOT NULL)
UNION ALL
(SELECT
P1.PLAYER_ID as P1_ID,
U1.EMAIL as P1_EMAIL,
U1.NAME as P1_NAME,
U2.NAME as P2_NAME,
DIVISION.NAME AS DIVISION,
LEAGUE.NAME AS LEAGUE,
ROUND.START, ROUND.END,
M.P1_SCORE as P1_SCORE, M.P2_SCORE as P2_SCORE,
IF(M.P1_SCORE > M.P2_SCORE, 'P1', IF(M.P1_SCORE = M.P2_SCORE, 'DRAW', 'P2') ) AS WINNER,
(IF(M.P1_SCORE > M.P2_SCORE, 3, IF(M.P1_SCORE = M.P2_SCORE, 2, 1) ) + M.P1_SCORE * 0.1 ) / CAST(DIVISION.NAME AS UNSIGNED) AS P1_POINTS,
(IF(M.P2_SCORE > M.P1_SCORE, 3, IF(M.P2_SCORE = M.P1_SCORE, 2, 1) ) + M.P2_SCORE * 0.1 ) / CAST(DIVISION.NAME AS UNSIGNED) AS P2_POINTS
FROM LEAGUE
JOIN ROUND ON ROUND.LEAGUE_ID = LEAGUE.LEAGUE_ID
JOIN DIVISION ON DIVISION.LEAGUE_ID = LEAGUE.LEAGUE_ID
JOIN PLAYER AS P1 ON P1.DIVISION_ID = DIVISION.DIVISION_ID
JOIN PLAYER AS P2 ON P2.DIVISION_ID = DIVISION.DIVISION_ID
JOIN USER AS U1 ON U1.USER_ID = P1.USER_ID
JOIN USER AS U2 ON U2.USER_ID = P2.USER_ID
JOIN (SELECT ROUND_ID, DIVISION_ID, SCORE, CAST(SUBSTRING_INDEX(SCORE,'-',1) AS UNSIGNED) AS P2_SCORE, CAST(SUBSTRING(SCORE FROM SUBSTRING_INDEX(SCORE,'-',1)) AS UNSIGNED) AS P1_SCORE, PLAYER_ONE_ID, PLAYER_TWO_ID FROM MATCHES) AS M ON M.ROUND_ID = ROUND.ROUND_ID AND M.DIVISION_ID = DIVISION.DIVISION_ID AND M.PLAYER_TWO_ID = P1.PLAYER_ID AND M.PLAYER_ONE_ID = P2.PLAYER_ID
WHERE ROUND.START = :" . self::round_start_parameter . " AND ROUND.END = :" . self::round_end_parameter . " AND M.SCORE IS NOT NULL)) as RANKING
GROUP BY P1_ID ORDER BY POINTS DESC, DIVISION, NAME) AS GROUPED;
*/


/*
SELECT
P1_ID as PLAYER_ID,
P1_EMAIL as NAME,
P1_NAME as EMAIL,
DIVISION as DIVISION,
LEAGUE as LEAGUE,
SUM(P1_POINTS) as POINTS
FROM
((SELECT
P1.PLAYER_ID as P1_ID,
U1.EMAIL as P1_EMAIL,
U1.NAME as P1_NAME,
U2.NAME as P2_NAME,
DIVISION.NAME AS DIVISION,
LEAGUE.NAME AS LEAGUE,
ROUND.START, ROUND.END,
M.P1_SCORE as P1_SCORE, M.P2_SCORE as P2_SCORE,
IF(M.P1_SCORE > M.P2_SCORE, 'P1', IF(M.P1_SCORE = M.P2_SCORE, 'DRAW', 'P2') ) AS WINNER,
(IF(M.P1_SCORE > M.P2_SCORE, 3, IF(M.P1_SCORE = M.P2_SCORE, 2, 1) ) + M.P1_SCORE * 0.1 ) / CAST(DIVISION.NAME AS UNSIGNED) AS P1_POINTS,
(IF(M.P2_SCORE > M.P1_SCORE, 3, IF(M.P2_SCORE = M.P1_SCORE, 2, 1) ) + M.P2_SCORE * 0.1 ) / CAST(DIVISION.NAME AS UNSIGNED) AS P2_POINTS
FROM LEAGUE
JOIN ROUND ON ROUND.LEAGUE_ID = LEAGUE.LEAGUE_ID
JOIN DIVISION ON DIVISION.LEAGUE_ID = LEAGUE.LEAGUE_ID
JOIN PLAYER AS P1 ON P1.DIVISION_ID = DIVISION.DIVISION_ID
JOIN PLAYER AS P2 ON P2.DIVISION_ID = DIVISION.DIVISION_ID
JOIN USER AS U1 ON U1.USER_ID = P1.USER_ID
JOIN USER AS U2 ON U2.USER_ID = P2.USER_ID
JOIN (SELECT ROUND_ID, DIVISION_ID, SCORE, CAST(SUBSTRING_INDEX(SCORE,'-',1) AS UNSIGNED) AS P1_SCORE, CAST(SUBSTRING(SCORE FROM SUBSTRING_INDEX(SCORE,'-',1)) AS UNSIGNED) AS P2_SCORE, PLAYER_ONE_ID, PLAYER_TWO_ID FROM MATCHES) AS M ON M.ROUND_ID = ROUND.ROUND_ID AND M.DIVISION_ID = DIVISION.DIVISION_ID AND M.PLAYER_ONE_ID = P1.PLAYER_ID AND M.PLAYER_TWO_ID = P2.PLAYER_ID
WHERE ROUND.START = :" . self::round_start_parameter . " AND ROUND.END = :" . self::round_end_parameter . " AND M.SCORE IS NOT NULL)
UNION ALL
(SELECT
P1.PLAYER_ID as P1_ID,
U1.EMAIL as P1_EMAIL,
U1.NAME as P1_NAME,
U2.NAME as P2_NAME,
DIVISION.NAME AS DIVISION,
LEAGUE.NAME AS LEAGUE,
ROUND.START, ROUND.END,
M.P1_SCORE as P1_SCORE, M.P2_SCORE as P2_SCORE,
IF(M.P1_SCORE > M.P2_SCORE, 'P1', IF(M.P1_SCORE = M.P2_SCORE, 'DRAW', 'P2') ) AS WINNER,
(IF(M.P1_SCORE > M.P2_SCORE, 3, IF(M.P1_SCORE = M.P2_SCORE, 2, 1) ) + M.P1_SCORE * 0.1 ) / CAST(DIVISION.NAME AS UNSIGNED) AS P1_POINTS,
(IF(M.P2_SCORE > M.P1_SCORE, 3, IF(M.P2_SCORE = M.P1_SCORE, 2, 1) ) + M.P2_SCORE * 0.1 ) / CAST(DIVISION.NAME AS UNSIGNED) AS P2_POINTS
FROM LEAGUE
JOIN ROUND ON ROUND.LEAGUE_ID = LEAGUE.LEAGUE_ID
JOIN DIVISION ON DIVISION.LEAGUE_ID = LEAGUE.LEAGUE_ID
JOIN PLAYER AS P1 ON P1.DIVISION_ID = DIVISION.DIVISION_ID
JOIN PLAYER AS P2 ON P2.DIVISION_ID = DIVISION.DIVISION_ID
JOIN USER AS U1 ON U1.USER_ID = P1.USER_ID
JOIN USER AS U2 ON U2.USER_ID = P2.USER_ID
JOIN (SELECT ROUND_ID, DIVISION_ID, SCORE, CAST(SUBSTRING_INDEX(SCORE,'-',1) AS UNSIGNED) AS P2_SCORE, CAST(SUBSTRING(SCORE FROM SUBSTRING_INDEX(SCORE,'-',1)) AS UNSIGNED) AS P1_SCORE, PLAYER_ONE_ID, PLAYER_TWO_ID FROM MATCHES) AS M ON M.ROUND_ID = ROUND.ROUND_ID AND M.DIVISION_ID = DIVISION.DIVISION_ID AND M.PLAYER_TWO_ID = P1.PLAYER_ID AND M.PLAYER_ONE_ID = P2.PLAYER_ID
WHERE ROUND.START = :" . self::round_start_parameter . " AND ROUND.END = :" . self::round_end_parameter . " AND M.SCORE IS NOT NULL)) as RANKING
GROUP BY P1_ID ORDER BY POINTS DESC, DIVISION, NAME;
*/
?>